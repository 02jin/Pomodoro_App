import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'environment_service.dart';
import 'notification_service.dart';
import 'storage_service.dart';

class WaterIntakeRecord {
  final DateTime timestamp;
  final int amount;
  
  WaterIntakeRecord({
    required this.timestamp,
    required this.amount,
  });
  
  Map<String, dynamic> toJson() {
    return {
      'timestamp': timestamp.millisecondsSinceEpoch,
      'amount': amount,
    };
  }
  
  factory WaterIntakeRecord.fromJson(Map<String, dynamic> json) {
    return WaterIntakeRecord(
      timestamp: DateTime.fromMillisecondsSinceEpoch(json['timestamp']),
      amount: json['amount'],
    );
  }
}

class HeatstrokePreventionService {
  static Timer? _waterReminderTimer;
  static Timer? _environmentCheckTimer;
  static List<WaterIntakeRecord> _todayWaterIntake = [];
  static StreamController<List<WaterIntakeRecord>>? _waterIntakeController;
  static StreamController<String>? _alertController;
  
  static Stream<String> get alertStream {
    _alertController ??= StreamController<String>.broadcast();
    return _alertController!.stream;
  }

  static Stream<List<WaterIntakeRecord>> get waterIntakeStream {
    _waterIntakeController ??= StreamController<List<WaterIntakeRecord>>.broadcast();
    return _waterIntakeController!.stream;
  }

  static Future<void> initialize() async {
    await _loadTodayWaterIntake();
    _startWaterReminder();
    _startEnvironmentMonitoring();
    
    EnvironmentService.environmentDataStream.listen((data) {
      _handleEnvironmentChange(data);
    });
  }

  static Future<void> _loadTodayWaterIntake() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = _getTodayString();
      final lastSavedDate = prefs.getString('water_intake_date') ?? '';
      
      if (lastSavedDate == today) {
        final recordsJson = prefs.getStringList('water_intake_records') ?? [];
        _todayWaterIntake = recordsJson.map((json) {
          return WaterIntakeRecord.fromJson(Map<String, dynamic>.from(jsonDecode(json)));
        }).toList();
      } else {
        _todayWaterIntake = [];
        await _saveTodayWaterIntake();
      }
      
      _waterIntakeController?.add(_todayWaterIntake);
    } catch (e) {
      _todayWaterIntake = [];
    }
  }

  static Future<void> _saveTodayWaterIntake() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = _getTodayString();
      
      final recordsJson = _todayWaterIntake.map((record) {
        return jsonEncode(record.toJson());
      }).toList();
      
      await prefs.setStringList('water_intake_records', recordsJson);
      await prefs.setString('water_intake_date', today);
    } catch (e) {
      print('ÏàòÎ∂Ñ ÏÑ≠Ï∑® Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®: $e');
    }
  }

  static String _getTodayString() {
    final now = DateTime.now();
    return '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
  }

  static Future<void> addWaterIntake(int amount) async {
    final record = WaterIntakeRecord(
      timestamp: DateTime.now(),
      amount: amount,
    );
    
    _todayWaterIntake.add(record);
    await _saveTodayWaterIntake();
    _waterIntakeController?.add(_todayWaterIntake);
    
    _showWaterIntakeConfirmation(amount);
  }

  static void _showWaterIntakeConfirmation(int amount) {
    final message = 'üíß ${amount}ml ÏàòÎ∂Ñ ÏÑ≠Ï∑® ÏôÑÎ£å! ÌõåÎ•≠Ìï¥Ïöî!';
    _alertController?.add(message);
  }

  static int getTodayTotalWaterIntake() {
    return _todayWaterIntake.fold(0, (sum, record) => sum + record.amount);
  }

  static int getRecommendedDailyWaterIntake() {
    final hourlyIntake = EnvironmentService.getRecommendedWaterIntake();
    return hourlyIntake * 8;
  }

  static double getWaterIntakeProgress() {
    final total = getTodayTotalWaterIntake();
    final recommended = getRecommendedDailyWaterIntake();
    return total / recommended;
  }

  static void _startWaterReminder() {
    _waterReminderTimer = Timer.periodic(const Duration(minutes: 30), (timer) {
      _checkWaterIntakeReminder();
    });
  }

  static void _checkWaterIntakeReminder() {
    final now = DateTime.now();
    final workingHours = now.hour >= 8 && now.hour <= 18;
    
    if (!workingHours) return;

    if (_todayWaterIntake.isNotEmpty) {
      final lastIntake = _todayWaterIntake.last.timestamp;
      final timeSinceLastIntake = now.difference(lastIntake);
      
      if (timeSinceLastIntake.inMinutes >= 45) {
        _sendWaterReminderNotification();
      }
    } else {
      _sendWaterReminderNotification();
    }
  }

  static void _sendWaterReminderNotification() async {
    final environmentData = EnvironmentService.getCurrentEnvironmentData();
    String message = 'üíß ÏàòÎ∂Ñ ÏÑ≠Ï∑® ÏãúÍ∞ÑÏûÖÎãàÎã§!';
    
    if (environmentData != null) {
      final recommended = EnvironmentService.getRecommendedWaterIntake();
      message += ' ÌòÑÏû¨ ${environmentData.temperature.toStringAsFixed(1)}¬∞C, ${recommended}ml Í∂åÏû•';
    }

    await NotificationService.showCustomNotification(
      'üö∞ ÏàòÎ∂Ñ Î≥¥Ï∂© ÏïåÎ¶º',
      message,
      4,
    );
    
    _alertController?.add(message);
  }

  static void _startEnvironmentMonitoring() {
    _environmentCheckTimer = Timer.periodic(const Duration(minutes: 10), (timer) {
      _checkEnvironmentAlerts();
    });
  }

  static void _handleEnvironmentChange(EnvironmentData data) {
    switch (data.heatLevel) {
      case HeatLevel.caution:
        _sendHeatCautionAlert(data);
        break;
      case HeatLevel.warning:
        _sendHeatWarningAlert(data);
        break;
      default:
        break;
    }
  }

  static void _checkEnvironmentAlerts() {
    final environmentData = EnvironmentService.getCurrentEnvironmentData();
    if (environmentData == null) return;

    final now = DateTime.now();
    final isWorkingTime = now.hour >= 8 && now.hour <= 18;
    
    if (!isWorkingTime) return;

    switch (environmentData.heatLevel) {
      case HeatLevel.caution:
        _sendPeriodicHeatCaution(environmentData);
        break;
      case HeatLevel.warning:
        _sendPeriodicHeatWarning(environmentData);
        break;
      default:
        break;
    }
  }

  static void _sendHeatCautionAlert(EnvironmentData data) async {
    final message = '‚ö†Ô∏è Ï§ëÍ∞ÑÏ†ïÎèÑ Ïò®ÎèÑÏûÖÎãàÎã§! Ï≤¥Í∞êÏò®ÎèÑ ${data.heatIndex.toStringAsFixed(1)}¬∞C\n${data.getHeatLevelDescription()}';
    
    await NotificationService.showCustomNotification(
      'üå°Ô∏è Ïò®ÎèÑ Ï£ºÏùò',
      message,
      5,
    );
    
    _alertController?.add(message);
  }

  static void _sendHeatWarningAlert(EnvironmentData data) async {
    final message = 'üö® Ìè≠Ïóº ÏúÑÌóò! Ï≤¥Í∞êÏò®ÎèÑ ${data.heatIndex.toStringAsFixed(1)}¬∞C\n${data.getHeatLevelDescription()}';
    
    await NotificationService.showCustomNotification(
      'üö® Ìè≠Ïóº Í≤ΩÎ≥¥',
      message,
      6,
    );
    
    await NotificationService.vibrateOnly();
    
    _alertController?.add(message);
  }

  static void _sendPeriodicHeatCaution(EnvironmentData data) async {
    final message = 'Í≥ÑÏÜçÎêú Í≥†Ïò® Ï£ºÏùò! ÌòÑÏû¨ ${data.temperature.toStringAsFixed(1)}¬∞C';
    _alertController?.add(message);
  }

  static void _sendPeriodicHeatWarning(EnvironmentData data) async {
    final message = '‚ö†Ô∏è ÏßÄÏÜçÏ†ÅÏù∏ Ìè≠Ïóº ÏúÑÌóò! Ï¶âÏãú ÏãúÏõêÌïú Í≥≥ÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî!';
    
    await NotificationService.showCustomNotification(
      'üö® Í∏¥Í∏â ÏïåÎ¶º',
      message,
      7,
    );
    
    _alertController?.add(message);
  }

  static String getForceBreakMessage() {
    final environmentData = EnvironmentService.getCurrentEnvironmentData();
    if (environmentData == null) {
      return 'Í≥†Ïò® ÌôòÍ≤ΩÏù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. ÏïàÏ†ÑÏùÑ ÏúÑÌï¥ Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏÑ∏Ïöî.';
    }

    return 'üö® Í∏¥Í∏â! Ï≤¥Í∞êÏò®ÎèÑ ${environmentData.heatIndex.toStringAsFixed(1)}¬∞C\n'
           'ÏûëÏóÖÏùÑ Ï§ëÎã®ÌïòÍ≥† ÏãúÏõêÌïú Í≥≥ÏóêÏÑú Ï∂©Î∂ÑÌûà Ìú¥ÏãùÌïòÏÑ∏Ïöî.\n'
           'ÏàòÎ∂ÑÏùÑ ÏÑ≠Ï∑®ÌïòÍ≥† Î™∏ÏùÑ ÏãùÌûàÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.';
  }

  static List<int> getWaterIntakeSuggestions() {
    final environmentData = EnvironmentService.getCurrentEnvironmentData();
    if (environmentData == null) return [200, 300, 500];

    switch (environmentData.heatLevel) {
      case HeatLevel.normal:
        return [150, 200, 250];
      case HeatLevel.caution:
        return [200, 300, 400];
      case HeatLevel.warning:
        return [300, 400, 500];
    }
  }

  static int getTodayHeatRiskScore() {
    final environmentData = EnvironmentService.getCurrentEnvironmentData();
    if (environmentData == null) return 0;

    final baseScore = switch (environmentData.heatLevel) {
      HeatLevel.normal => 10,
      HeatLevel.caution => 40,
      HeatLevel.warning => 80,
    };

    final waterProgress = getWaterIntakeProgress();
    final waterBonus = (waterProgress * 20).clamp(0, 20).toInt();

    return (baseScore - waterBonus).clamp(0, 100);
  }

  static String getHealthStatusMessage() {
    final riskScore = getTodayHeatRiskScore();
    final waterProgress = getWaterIntakeProgress();
    
    if (riskScore <= 20 && waterProgress >= 0.8) {
      return '‚úÖ ÏàòÎ∂Ñ ÏÑ≠Ï∑® Ïù∏Ï¶ù ÏôÑÎ£å!\nÏ∞∏ ÏûòÌñàÏñ¥Ïöî! Î¨ºÏùÑ ÎßàÏã† Í≤å ÌôïÏù∏ÌñàÏñ¥Ïöî.';
    } else if (riskScore <= 40) {
      return 'üòê Î¨º ÌïúÏûî ÎßàÏÖîÎ≥ºÍπåÏöî?\nÏïÑÎûò Î≤ÑÌäºÏùÑ ÎàåÎü¨ Ïù∏Ï¶ùÌï¥Ï£ºÏÑ∏Ïöî.';
    } else if (riskScore <= 60) {
      return 'üò∞ Í∑∏ÎäòÏóê Î®∏Î¨¥Î•¥Î©∞ Ïó¥ÏùÑ ÏãùÌòÄÎ≥¥ÏïÑÏöî.';
    } else {
      return 'üö® ÌÉÄÏù¥Î®∏Í∞Ä Í≥ß ÏãúÏûëÎê©ÎãàÎã§.\nÏßÄÍ∏àÏùÄ Ìú¥ÏãùÏãúÍ∞ÑÏûÖÎãàÎã§.\nÎ¨º ÌïúÏûî ÎßàÏÖîÎ≥ºÍπåÏöî?\nÏïÑÎûò Î≤ÑÌäºÏùÑ ÎàåÎü¨ Ïù∏Ï¶ùÌï¥Ï£ºÏÑ∏Ïöî.';
    }
  }

  static void dispose() {
    _waterReminderTimer?.cancel();
    _environmentCheckTimer?.cancel();
    _waterIntakeController?.close();
    _alertController?.close();
  }
}
